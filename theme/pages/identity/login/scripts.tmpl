{{ define "identity_login_scripts" }}

<script nonce="{{.Config.Nonce}}">

  var otpLength = {{ .Data.OtpLength }};
  var identifier = "{{ .Data.Identifier }}";

  document.addEventListener("DOMContentLoaded", onPageLoad);

  function onPageLoad() {
    setUsernameInputEnableOnSubmit();
    initOtpInput('otp-input-container', otpLength);
    applyFocus();
    disableButtonsOnEmptyInputs();
    setButtonEnablementOnInput();
    initWebAuthn();
  }

  function setUsernameInputEnableOnSubmit() {
    var usernameInput = document.getElementById('text-field-username-input');
    var form = document.querySelector('form');

    if (!form || !usernameInput) return;
    form.addEventListener('submit', function () {
      usernameInput.disabled = false;
    });
  }

  function applyFocus() {
    var passwordInput = document.getElementById('text-field-password-input');
    var userNameInput = document.getElementById('text-field-username-input');

    if (identifier === "" && !!userNameInput) {
      userNameInput.focus();
    } else if(!!passwordInput) {
      passwordInput.focus();
    }
  }

  function setButtonEnablementOnInput() {
    var inputNodes = ['text-field-username-input', 'text-field-password-input', 'otp-input'];
    inputNodes.map(elementId => document.getElementById(elementId))
      .filter(inputNode => !!inputNode)
      .forEach(existingInputNode => {
        existingInputNode.addEventListener('input', disableButtonsOnEmptyInputs);
      });
  }

  function disableButtonsOnEmptyInputs() {
    var usernameInput = document.getElementById('text-field-username-input');
    var passwordInput = document.getElementById('text-field-password-input');
    var otpInput = document.getElementById('otp-input');
    var signInButton = document.getElementById('sign-in-button');
    var webAuthnSignInButton = document.getElementById('web-authn-sign-in-button');
    var sendCodeButton = document.getElementById('send-code-button');
    var verifyButton = document.getElementById('verify-button');
    var verifyButton = document.getElementById('verify-button');

    if(usernameInput && passwordInput && signInButton) signInButton.disabled = !usernameInput.value || !passwordInput.value;
    if(usernameInput && webAuthnSignInButton) webAuthnSignInButton.disabled = !usernameInput.value;
    if(usernameInput && sendCodeButton) sendCodeButton.disabled = !usernameInput.value;
    if(usernameInput && otpInput && verifyButton) verifyButton.disabled = !usernameInput.value || !otpInput.value || otpInput.value.length < otpLength;
  }

  function initWebAuthn() {
    var form = document.querySelector('form');
    var view = {{ .Data.AuthnView }};
    var signInButton = document.getElementById('sign-in-button');

    if (view === "web_authn_view") {
        form.addEventListener("submit", function (e) {
        if (e.submitter.id !== "web-authn-sign-in-button") {
          return;
        }
        
        e.preventDefault();
        webAuthnLogin();
      });
    } else {
       form.addEventListener("submit", function (e) {
        if (signInButton) {
          signInButton.disabled = true;
        }
      });
    }
  }

  function webAuthnLogin() {
    var webAuthnError = document.querySelector("#hidden-text-field-webauthn-error");
    var server_id = (new URL(document.location)).searchParams.get("server_id");
    var identifier = document.querySelector("#text-field-username-input").value;
    
    webAuthnError.value = '';

    fetch(window.location.pathname + "/webauthn/options?" + new URLSearchParams({ server_id: server_id }), {
      method: "POST",
      body: JSON.stringify({
        identifier: identifier,
      }),
    })
    .then(function (response) {
      return response.json();
    })
    .then((credentialRequestOptions) => {
      credentialRequestOptions.publicKey.challenge = bufferDecode(credentialRequestOptions.publicKey.challenge);
      credentialRequestOptions.publicKey.allowCredentials.forEach(function (listItem) {
        listItem.id = bufferDecode(listItem.id);
      });

      return navigator.credentials.get({
        publicKey: credentialRequestOptions.publicKey
      });
    })
    .then((assertion) => {
      let authData = assertion.response.authenticatorData;
      let clientDataJSON = assertion.response.clientDataJSON;
      let rawId = assertion.rawId;
      let sig = assertion.response.signature;
      let userHandle = assertion.response.userHandle;
      
      return fetch(window.location.pathname + "/webauthn/finish?" + new URLSearchParams({ server_id: server_id }), {
        method: "POST",
        body: JSON.stringify({
          id: assertion.id,
          rawId: bufferEncode(rawId),
          type: assertion.type,
          response: {
            authenticatorData: bufferEncode(authData),
            clientDataJSON: bufferEncode(clientDataJSON),
            signature: bufferEncode(sig),
            userHandle: bufferEncode(userHandle),
          },
        }),
      });
      
    })
    .catch((error) => {
      webAuthnError.value = error;
    })
    .finally(() => {
      if(!webAuthnError.value.startsWith("NotAllowedError:")) {
          document.querySelector('form').submit();
      } else {
          webAuthnError.value = '';
      }
    });
  }

  function bufferEncode(value) {
    return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
      .replace(/\+/g, "-")
      .replace(/\//g, "_")
      .replace(/=/g, "");
  }

  function bufferDecode(value) {
    return Uint8Array.from(atob(value), c => c.charCodeAt(0));
  }

</script>

{{ end }}