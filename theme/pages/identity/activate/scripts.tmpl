{{ define "identity_activate_scripts" }}

<script nonce="{{.Config.Nonce}}">

  var view = "{{ .Data.Mode }}";
  var otpLength = {{ .Data.OtpLength }};

  document.addEventListener("DOMContentLoaded", function() {
    if (view === "web_authn") {
      initWebAuthn();
    } else if (view === "password") {
      initPassword();
    }
    initOtpInput('otp-input-container', otpLength );
  });

  function initPassword() {
    var passwordInput = document.querySelector('#text-field-password-input');
    var repeatPasswordInput = document.querySelector('#text-field-repeat-password-input');
    var submitButton = document.querySelector('#sign-up-button');

    if (!passwordInput || !repeatPasswordInput || !submitButton) return;

    function disableSubmitButtonOnEmptyInput() {
      submitButton.disabled = !passwordInput.value || !repeatPasswordInput.value;
    }

    passwordInput.addEventListener('input', disableSubmitButtonOnEmptyInput);
    repeatPasswordInput.addEventListener('input', disableSubmitButtonOnEmptyInput);
  }

  function initWebAuthn() {
    var form = document.querySelector("#sign-up-form");

    form.addEventListener("submit", e => {
      if (e.submitter.id !== "sign-up-button") {
        return;
      }

      e.preventDefault();
      registerUser();
    });
  }

  function bufferEncode(value) {
      return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=/g, "");
    }

    function bufferDecode(value) {
      return Uint8Array.from(atob(value), c => c.charCodeAt(0));
    }

    function registerUser() {
      var webAuthnError = document.querySelector("#hidden-text-field-webauthn-error");
      var code = (new URL(document.location)).searchParams.get("code");
      var identifier = "new"

      webAuthnError.value = '';

      fetch(window.location.pathname + "/webauthn/begin?" + new URLSearchParams({ code: code }))
      .then(function (response) {
        return response.json();
      })
      .then((credentialCreationOptions) => {
        credentialCreationOptions.publicKey.challenge = bufferDecode(credentialCreationOptions.publicKey.challenge);
        credentialCreationOptions.publicKey.user.id = bufferDecode(credentialCreationOptions.publicKey.user.id);
        return navigator.credentials.create({
          publicKey: credentialCreationOptions.publicKey,
        });
      })
      .then((credential) => {
        var attestationObject = credential.response.attestationObject;
        var clientDataJSON = credential.response.clientDataJSON;
        var rawId = credential.rawId;

        return fetch(window.location.pathname + "/webauthn/finish?" + new URLSearchParams({ code: code }), {
          method: "POST",
          body: JSON.stringify({
            id: credential.id,
            rawId: bufferEncode(rawId),
            type: credential.type,
            response: {
              attestationObject: bufferEncode(attestationObject),
              clientDataJSON: bufferEncode(clientDataJSON),
            },
          }),
        });
      })
      .catch((error) => {
        webAuthnError.value = error
      })
      .finally(() => {
        document.querySelector('#sign-up-form').submit();
      });
    }

</script>

{{ end }}