{{ define "identity_register_ux_improved_scripts" }}

  <script nonce="{{.Config.Nonce}}">

    document.addEventListener("DOMContentLoaded", onPageLoad);
    var inputNodes;
    var captchaSuccess;

    function onPageLoad() {
      loadInputNodes();
      setCaptchaOverrides();
      disableButtonsOnEmptyInputs();
      setButtonEnablementOnInput();
    }

    function loadInputNodes() {
      inputNodes = Array.from(document.querySelectorAll("input")).filter(inputNode => !inputNode.hidden);
    }

    function setCaptchaOverrides() {
      var recaptcha = document.querySelector(".g-recaptcha");
      if(!recaptcha) {
        captchaSuccess = true;
      } else {
        captchaSuccess = false;
        recaptcha.setAttribute("data-callback", "captchaSuccessCallback");
        recaptcha.setAttribute("data-expired-callback", "captchaFailureCallback");
        recaptcha.setAttribute("data-error-callback", "captchaFailureCallback");
      }
    }

    function captchaSuccessCallback() {
      captchaSuccess = true;
      disableButtonsOnEmptyInputs();
    }

    function captchaFailureCallback() {
      captchaSuccess = false;
      disableButtonsOnEmptyInputs();
    }

    function setButtonEnablementOnInput() {
      inputNodes.forEach(inputNode => {
        inputNode.addEventListener('input', disableButtonsOnEmptyInputs);
      });
    }

    function disableButtonsOnEmptyInputs() {
      var submitButton = document.getElementById("submit-next");
      if(!!submitButton) {
        var shouldDisableSubmit = inputNodes.some(inputNode => {
          return !inputNode.value;
        }) || !captchaSuccess;

        submitButton.disabled = shouldDisableSubmit;
      }
    }

  </script>
{{ end }}
